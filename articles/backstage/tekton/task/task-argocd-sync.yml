apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: argocd-sync
  namespace: backstage-sample
  labels:
    app.kubernetes.io/version: "0.9"
  annotations:
    tekton.dev/pipelines.minVersion: "0.38.0"
    tekton.dev/categories: Deployment
    tekton.dev/tags: deploy
    tekton.dev/displayName: "argocd"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    This task syncs (deploys) an Argo CD application and waits for it to be healthy.

    To do so, it requires the address of the Argo CD server and some form of
    authentication either a username/password or an authentication token.
  workspaces:
    - name: argocd-basic-auth
      description: |
        A workspace containing username and password to log in to argocd server.
  params:
    - name: applicationName
      description: name of the application to sync
      type: string
    - name: revision
      description: the revision to sync to
      default: HEAD
      type: string
    - name: flags
      default: --
      type: string
    - name: argocd-version
      default: v2.2.2
      type: string
    - name: server
      description: Argocd server name
      type: string
      default: argocd.ops.com:32566
    - name: timeout
      description: timeout until
      default: 60
    - name: imageName
      description: Image name
      type: string
      default: harbor.centre.com/k8s/argocd-cli
    - name: imageTag
      description: Image tag
      type: string
      default: latest
  steps:
    - name: sync
      image: $(params.imageName):$(params.imageTag)
      env:
        - name: ARGOCD_SERVER
          value: $(params.server)
        - name: ARGOCD_APPNAME
          value: $(params.applicationName)
        - name: ARGOCD_AUTH_PATH
          value: $(workspaces.argocd-basic-auth.path)
        - name: ARGOCD_TIMEOUT
          value: $(params.timeout)
      script: |
        #!/usr/bin/env sh
        export ARGOCD_USERNAME=$(cat ${ARGOCD_AUTH_PATH}/username)
        export ARGOCD_PASSWORD=$(cat ${ARGOCD_AUTH_PATH}/password)
        if [ -z "$ARGOCD_AUTH_TOKEN" ]; then
          yes | argocd login "$ARGOCD_SERVER" --username="${ARGOCD_USERNAME}" --password="${ARGOCD_PASSWORD}" --insecure;
        fi
        argocd app sync ${ARGOCD_APPNAME} --revision "$(params.revision)" "$(params.flags)"
        
